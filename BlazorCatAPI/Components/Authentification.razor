@using FluentValidation
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Http

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject UserHttpContextService UserHttpContextService
@inject IDbContextFactory<BlazorCatAPIDbContext> ContextFactory
@inject UserService UserService

<MudCard Style="width: 40%">
    @if(failedLogin)
    {
        <MudText Color="Color.Error">Invalid credentials ! Please check your username and password and try again.</MudText>
    }
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.Email"
                          For="@(() => model.Email)"
                          Immediate="true"
                          Label="Email" />

            <MudTextField @bind-Value="model.Password"
                          For="@(() => model.Password)"
                          Immediate="true"
                          Label="Password" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Color="Color.Secondary" Size="Size.Small" OnClick="@(() => NavigationManager.NavigateTo("/register"))">Not registered ?</MudButton>
        <MudButton Color="Color.Secondary" Size="Size.Small" Href="/LoginGoogle">Google Sign in</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Login</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private bool failedLogin = false;
    MudForm? form;

    UserModelFluentValidator orderValidator;

    UserModel model = new UserModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        orderValidator = new UserModelFluentValidator();

    }

    public class UserModel
    {
        public string Email { get; set; } = String.Empty;
        public string Password { get; set; } = String.Empty;
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            BlazorCatAPIDbContext context = ContextFactory.CreateDbContext();

            if (await UserService.AuthUser(model.Email, model.Password))
            {
                ClaimsPrincipal userState = await UserService.BuildClaimsPrincipal(model.Email) ?? throw new Exception("Failed to build Http context around the user data");
                UserHttpContextService.SetUser(userState);
                // La méthode ci-dessous est ce qui est utilisé avec une page Razor :
                // await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(User), authProperties);

                // Normalement on redirige en ayant connecté seulement ca ne fonctionne pas pour l'instant
                //NavigationManager.NavigateTo("/home", true);
                Snackbar.Add("Seulement le login par Google fonctionne actuellement");

            }

        }
    }

    public class UserModelFluentValidator : AbstractValidator<UserModel>
    {
        public UserModelFluentValidator()
        {
            RuleFor(x => x.Email)
                   .Cascade(CascadeMode.Stop)
                   .NotEmpty()
                   .EmailAddress();

            RuleFor(x => x.Password)
                .NotEmpty()
                .Length(8, 256);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<UserModel>.CreateWithOptions((UserModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}