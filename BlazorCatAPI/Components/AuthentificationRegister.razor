@using FluentValidation
@using Microsoft.EntityFrameworkCore;
@using System.Security.Claims;

@inject NavigationManager NavigationManager
@inject UserService UserService

<MudCard Style="width: 40%">
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.Email"
                          For="@(() => model.Email)"
                          Immediate="true"
                          Label="Email" />

            <MudTextField @bind-Value="model.Password"
                          For="@(() => model.Password)"
                          Immediate="true"
                          Label="Password" />

                <MudTextField @bind-Value="model.GivenName"
                              For="@(() => model.GivenName)"
                              Immediate="true"
                              Label="Name" />

                <MudTextField @bind-Value="model.SurName"
                              For="@(() => model.SurName)"
                              Immediate="true"
                              Label="Surname" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Color="Color.Secondary" Size="Size.Small" Href="/LoginGoogle">Google Sign in</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Register</MudButton>
    </MudCardActions>
</MudCard>

@code {
    MudForm? form;

    UserModelFluentValidator orderValidator;

    UserModel model = new UserModel();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        orderValidator = new UserModelFluentValidator(UserService);
    }

    public class UserModel
    {
        public string Email { get; set; } = String.Empty;
        public string Password { get; set; } = String.Empty;
        public string GivenName { get; set; } = String.Empty;
        public string SurName { get; set; } = String.Empty;
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await UserService.RegisterUser(model.SurName, model.GivenName, model.Email, model.Password);
            NavigationManager.NavigateTo("/login");
        }
    }

    public class UserModelFluentValidator : AbstractValidator<UserModel>
    {
        private UserService userService;

        public UserModelFluentValidator(UserService us)
        {
            this.userService = us;

            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (email, cancellationToken) => await userService.IsEmailUnique(email))
                .WithMessage("Email is already in use.");

            RuleFor(x => x.GivenName)
                .NotEmpty()
                .Length(2, 20);

            RuleFor(x => x.SurName)
                .NotEmpty()
                .Length(2, 40);

            RuleFor(x => x.Password)
                .NotEmpty()
                .Length(8, 256);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
    {
            var result = await ValidateAsync(ValidationContext<UserModel>.CreateWithOptions((UserModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}