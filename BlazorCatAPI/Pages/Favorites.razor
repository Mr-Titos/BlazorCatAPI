@page "/favorites"
@using System.Security.Claims;
@attribute [Authorize]

@inject CatService CatService
@inject UserService UserService
@inject UserHttpContextService UserHttpContextService
@inject NavigationManager NavigationManager

<PageTitle>Favorites</PageTitle>
@for(int i = 0; i < cats.Count; i++)
{
    if ((cats.Count) - i >= 2)
    {
        <div style="display: flex; flex-direction: row; gap: 15px">
            <CatController Cat="cats[i]" Refresh="Refresh"></CatController>
            <CatController Cat="cats[i + 1]" Refresh="Refresh"></CatController>
        </div>
        i++;
    } 
    else
    {
        <CatController Cat="cats[i]" Refresh="Refresh"></CatController>
    }
    <br />
}


@code {
    ClaimsPrincipal user;

    List<Cat> cats;

    protected async override Task OnInitializedAsync()
    {
        cats = new List<Cat>();
        user = UserHttpContextService.GetUser();
        List <Favorite> favoritesCat = await UserService.GetFavorites(user.FindFirst(ClaimTypes.NameIdentifier).Value);
        favoritesCat.ForEach(f => {
            // Without this hack, the code will turn into an infinite loop
            Task<Cat> task = Task.Run<Cat>(async () => await CatService.GetCat(f.ImageId));
            cats.Add(task.Result);
        });
        cats = cats.OrderBy(c => c.Breeds.First().name).ToList();
    }

    private void Refresh()
    {
        NavigationManager.NavigateTo("/favorites", true);
    }
}
